import java.time.Instant

plugins {
  id /*net.fabricmc.*/ "fabric-loom" version "0.12.51"
  id "net.nemerosa.versioning" version "3.0.0"
  id "org.gradle.signing"
}

group = "dev.sapphic"
version = "1.0.0"

java {
  withSourcesJar()
}

loom {
  accessWidenerPath.set(file(".accesswidener"))

  mixin {
    defaultRefmapName.set("mixins/wearablebackpacks/refmap.json")
  }

  runs {
    configureEach {
      property "mixin.debug", "true"
      property "mixin.debug.export.decompile", "false"
      property "mixin.debug.verbose", "true"
      property "mixin.dumpTargetOnFailure", "true"
      property "mixin.checks", "true"
      property "mixin.hotSwap", "true"
    }
  }
}

repositories {
  maven {
    url = "https://maven.terraformersmc.com"
    content {
      includeGroup "com.terraformersmc"
    }
  }
}

dependencies {
  minecraft "com.mojang:minecraft:1.19.2"
  mappings "net.fabricmc:yarn:1.19.2+build.28:v2"
  modImplementation "net.fabricmc:fabric-loader:0.14.19"

  final fabricVersion = "0.76.0+1.19.2"

  modImplementation include(fabricApi.module("fabric-api-base", fabricVersion))
  modImplementation include(fabricApi.module("fabric-events-interaction-v0", fabricVersion))
  modImplementation include(fabricApi.module("fabric-key-binding-api-v1", fabricVersion))
  modImplementation include(fabricApi.module("fabric-lifecycle-events-v1", fabricVersion))
  modImplementation include(fabricApi.module("fabric-networking-api-v1", fabricVersion))
  modImplementation include(fabricApi.module("fabric-networking-blockentity-v0", fabricVersion))
  modImplementation include(fabricApi.module("fabric-object-builder-api-v1", fabricVersion))
  modImplementation include(fabricApi.module("fabric-registry-sync-v0", fabricVersion))
  modImplementation include(fabricApi.module("fabric-renderer-registries-v1", fabricVersion))
  modImplementation include(fabricApi.module("fabric-rendering-v1", fabricVersion))
  modImplementation include(fabricApi.module("fabric-resource-loader-v0", fabricVersion))
  modImplementation include(fabricApi.module("fabric-screen-handler-api-v1", fabricVersion))

  modImplementation "com.terraformersmc:modmenu:4.1.2"

  implementation "com.google.code.findbugs:jsr305:3.0.2"
  implementation "org.jetbrains:annotations:23.0.0"
  implementation 'org.checkerframework:checker-qual:3.22.1'
}

compileJava {
  options.with {
    it.deprecation = true
    it.encoding = "UTF-8"
    it.fork = true
    it.compilerArgs.addAll(
        ["-Xlint:all", "-Xlint:-processing",
         // Enable parameter name class metadata 
         // https://openjdk.java.net/jeps/118
         "-parameters"]
    )
    it.release.set(8)
  }
}

processResources {
  filesMatching("/fabric.mod.json") {
    expand version: version
  }
}

jar {
  from "/LICENSE"

  manifest.attributes(
      "Build-Timestamp": Instant.now(),
      "Build-Revision": versioning.info.commit,
      "Build-Jvm": ""
          + "${System.getProperty("java.version")} ("
          + "${System.getProperty("java.vm.vendor")} "
          + "${System.getProperty("java.vm.version")})",
      "Built-By": GradleVersion.current(),

      "Implementation-Title": project.name,
      "Implementation-Version": project.version,
      "Implementation-Vendor": project.group,

      "Specification-Title": "FabricMod",
      "Specification-Version": "1.0.0",
      "Specification-Vendor": "dev.sapphic",

      "Sealed": "true"
  )
}

def antSignJar(task) {
  for (final file in task.outputs.files) {
    ant.signjar(
        jar: file,
        alias: property("signing.mods.keyalias"),
        storepass: property("signing.mods.password"),
        keystore: property("signing.mods.keystore"),
        verbose: true,
        preservelastmodified: true
    )
  }
}

if (hasProperty "signing.mods.keyalias") {
  task signJar(type: Sign) {
    dependsOn remapJar

    doFirst {
      antSignJar remapJar
    }

    sign remapJar
  }

  task signSourcesJar(type: Sign) {
    dependsOn remapSourcesJar

    doFirst {
      antSignJar remapSourcesJar
    }

    sign remapSourcesJar
  }

  assemble {
    dependsOn(signJar, signSourcesJar)
  }
}
